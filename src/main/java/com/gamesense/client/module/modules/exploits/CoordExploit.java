package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.settings.Setting;
import com.gamesense.api.util.world.WorldUtils;
import com.gamesense.client.command.Command;
import com.gamesense.client.module.Module;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.math.Vec3d;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;

public class CoordExploit extends Module {
    private final HashMap knownPlayers = new HashMap();
    private final HashMap tpdPlayers = new HashMap();
    Setting.Boolean chatMessages;
    private int numTicks = 0;
    private int numForgetTicks = 0;

    public CoordExploit() {
        super("CoordExploit", Category.Exploits);
    }

    public void setup() {
        chatMessages = registerBoolean("Chat Messages", "ChatMessages", false);
    }


    public void dump() {
        Iterator var1 = mc.world.loadedEntityList.iterator();

        while (var1.hasNext()) {
            Entity entity = (Entity) var1.next();
            if (entity instanceof EntityPlayer) {
                System.out.println(entity.getName() + ": " + WorldUtils.vectorToString(entity.getPositionVector()));
                Command.sendClientMessage(entity.getName() + ": " + WorldUtils.vectorToString(entity.getPositionVector()));
            }
        }
    }

    public void clear() {
        this.knownPlayers.clear();
    }

    public void saveFile(String pos, String name) {
        try {
            File file = new File("./GameSense/Messages/CoordExploit.json");
            file.getParentFile().mkdirs();
            PrintWriter writer = new PrintWriter(new FileWriter(file, true));
            writer.println("name: " + name + " coords: " + pos);
            writer.close();
        } catch (Exception var5) {
            Command.sendClientMessage("Error saving file: " + var5);
        }
    }

    public void onUpdate() {
        if (this.isEnabled()) {
            if (this.numTicks >= 50) {
                this.numTicks = 0;
                Iterator var1 = mc.world.loadedEntityList.iterator();

                label51:
                while (true) {
                    while (true) {
                        Entity entity;
                        do {
                            do {
                                if (!var1.hasNext()) {
                                    break label51;
                                }

                                entity = (Entity) var1.next();
                            } while (!(entity instanceof EntityPlayer));
                        } while (entity.getName().equals(mc.player.getName()));

                        Vec3d playerPos = new Vec3d((int) entity.posX, (int) entity.posY, (int) entity.posZ);
                        if (this.knownPlayers.containsKey(entity)) {
                            if (Math.abs(((Vec3d) this.knownPlayers.get(entity)).distanceTo(playerPos)) > 50.0D && Math.abs(mc.player.getPositionVector().distanceTo(playerPos)) > 100.0D && (!this.tpdPlayers.containsKey(entity.getName()) || this.tpdPlayers.get(entity.getName()) != playerPos)) {
                                if (chatMessages.getValue()) {
                                    Command.sendClientMessage("Player " + entity.getName() + " teleported to " + WorldUtils.vectorToString(playerPos));
                                }
                                this.saveFile(WorldUtils.vectorToString(playerPos), entity.getName());
                                this.knownPlayers.remove(entity);
                                this.tpdPlayers.put(entity.getName(), playerPos);
                            }

                            this.knownPlayers.put(entity, playerPos);
                        } else {
                            this.knownPlayers.put(entity, playerPos);
                        }
                    }
                }
            }

            if (this.numForgetTicks >= 9000000) {
                this.tpdPlayers.clear();
            }
            this.numTicks++;
            this.numForgetTicks++;
        }
    }
}